

/* John has invited some friends. His list is:

s = "Fred:Corwill;Wilfred:Corwill;Barney:Tornbull;Betty:Tornbull;Bjon:Tornbull;Raphael:Corwill;Alfred:Corwill";
Could you make a program that

makes this string uppercase
gives it sorted in alphabetical order by last name.
When the last names are the same, sort them by first name. Last name and first name of a guest come in the result between parentheses separated by a comma.

So the result of function meeting(s) will be:

"(CORWILL, ALFRED)(CORWILL, FRED)(CORWILL, RAPHAEL)(CORWILL, WILFRED)(TORNBULL, BARNEY)(TORNBULL, BETTY)(TORNBULL, BJON)"
It can happen that in two distinct families with the same family name two people have the same first name too.*/



String meeting(String s) {
  
  // Step 1: Convert the string to uppercase
  s = s.toUpperCase();
  
  // Step 2: Split the string into individual names
  List<String> names = s.split(';');
  
  // Step 3: Create a list of tuples with last name and first name
  List<List<String>> formattedNames = names.map((name) {
    List<String> nameParts = name.split(':');
    return [nameParts[1], nameParts[0]]; // Swap first name and last name
  }).toList();
  
  // Step 4: Sort the list by last name and then by first name
  formattedNames.sort((a, b) {
    int lastNameComparison = a[0].compareTo(b[0]);
    if (lastNameComparison != 0) {
      return lastNameComparison;
    } else {
      return a[1].compareTo(b[1]);
    }
  });
  
  // Step 5: Format the result as (LAST NAME, FIRST NAME)
  String result = formattedNames.map((name) => '(${name[0]}, ${name[1]})').join();
  
  return result;
}
